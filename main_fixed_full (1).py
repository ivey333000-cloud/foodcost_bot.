import os
import re
from pathlib import Path
import pandas as pd
import openpyxl
from margin_control import setup_margin_control
from openpyxl import Workbook, load_workbook
from openpyxl.utils import get_column_letter

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,

    BotCommand,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler,
)

# === –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é Telegram) ===
async def set_bot_commands(app):
    try:
        commands = [
            BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("ttk", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –¢–¢–ö"),
            BotCommand("ttk_bulk", "–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¢–¢–ö"),
            BotCommand("cost", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"),
            BotCommand("zakup", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–∫—É–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤"),
            BotCommand("delete", "–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ –∏–∑ –¢–¢–ö"),
            BotCommand("table", "–°–∫–∞—á–∞—Ç—å –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å.xlsx"),
            BotCommand("ttk_file", "–°–∫–∞—á–∞—Ç—å TTK.xlsx"),
            BotCommand("dishes", "–í—ã–±—Ä–∞—Ç—å –±–ª—é–¥–∞ –¥–ª—è –∑–∞–∫—É–ø–∞"),
        ]
        await app.bot.set_my_commands(commands)
    except Exception as e:
        print(f"[WARN] set_my_commands failed: {e}")

# =====================
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/—Ñ–∞–π–ª—ã
# =====================
EXCEL_FILE = "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å.xlsx"
TTK_FILE = "TTK.xlsx"
TTK_SHEET_NAME = "TTK"
PAGE_SIZE = 10

# –°–æ—Å—Ç–æ—è–Ω–∏—è
AWAITING_TTK_NAME, AWAITING_TTK_INGREDIENTS, AWAITING_COST_NAMES, AWAITING_COST_PRICES, AWAITING_ZAKUP_INPUT, AWAITING_SET_PRICE_BULK, AWAITING_DISHES_QTY = range(
    7)

# –ó–∞–≥–æ–ª–æ–≤–∫–∏
HEADERS = ["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–í–µ—Å (–≥)", "–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥", "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"]
TTK_HEADERS = ["–ë–ª—é–¥–æ", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–í–µ—Å (–≥)"]

# =====================
# –£—Ç–∏–ª–∏—Ç—ã Excel/–º–∞—Ç—Ä–∏—Ü—ã
# =====================


def normalize_name(name: str) -> str:
    return re.sub(r"\s+", " ", name.strip()).lower()


def load_dishes_from_ttk(ttk_path: str = TTK_FILE,
                         sheet: str = TTK_SHEET_NAME) -> list[str]:
    """–ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª—é–¥ –∏–∑ TTK.xlsx (–ª–∏—Å—Ç TTK). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫."""
    try:
        wb = load_workbook(ttk_path)
    except FileNotFoundError:
        return []
    if sheet not in wb.sheetnames:
        return []
    ws = wb[sheet]
    dishes = []
    for row in ws.iter_rows(min_row=2, values_only=True):
        if row and row[0]:
            name = str(row[0]).strip()
            if name:
                dishes.append(name)
    return sorted(set(dishes), key=str.lower)


def ensure_matrix_file(path: str):
    """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í–µ—Ä–Ω—É—Ç—å (ws, wb)."""
    p = Path(path)
    if not p.exists():
        wb = Workbook()
        ws = wb.active
        ws.title = "Sheet"
        ws.append(HEADERS)
        wb.save(p)
    wb = load_workbook(p)
    ws = wb.active
    # –ü—Ä–æ–≤–µ—Ä–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    first_row = [c.value for c in ws[1]]
    if not first_row or first_row[:len(HEADERS)] != HEADERS:
        ws.delete_rows(1, ws.max_row)
        ws.append(HEADERS)
        wb.save(p)
    return ws, wb


def get_or_create_ttk_ws(path: str = TTK_FILE,
                         sheet_name: str = TTK_SHEET_NAME):
    """–û—Ç–∫—Ä—ã—Ç—å TTK.xlsx –∏ –≤–µ—Ä–Ω—É—Ç—å –ª–∏—Å—Ç —Å —Ç–æ—á–Ω—ã–º –∏–º–µ–Ω–µ–º sheet_name. –°–æ–∑–¥–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç. –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã."""
    p = Path(path)
    if p.exists():
        wb = load_workbook(p)
    else:
        wb = Workbook()

    if sheet_name in wb.sheetnames:
        ws = wb[sheet_name]
    else:
        # —É–¥–∞–ª–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π Sheet –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        if len(wb.sheetnames) == 1 and wb.sheetnames[0].lower().startswith(
                "sheet"):
            del wb[wb.sheetnames[0]]
        ws = wb.create_sheet(title=sheet_name)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    if ws.max_row == 1 and ws.max_column == 1 and (ws["A1"].value is None):
        ws.append(TTK_HEADERS)
        wb.save(path)
    return ws, wb


def upsert_row(ws, name: str, weight_g: float, price_per_kg: float):
    """–î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Ç—Ä–∏—Ü–µ EXCEL_FILE."""
    target = normalize_name(name)
    found_row = None
    for row in ws.iter_rows(min_row=2):
        cell_name = row[0].value
        if cell_name and normalize_name(str(cell_name)) == target:
            found_row = row[0].row
            break
    if found_row:
        ws.cell(found_row, 2).value = weight_g
        ws.cell(found_row, 3).value = price_per_kg
    else:
        ws.append([name.strip(), weight_g, price_per_kg, ""])


def sort_sheet_by_name(ws):
    rows = [r for r in ws.iter_rows(min_row=2, values_only=True)]
    rows.sort(key=lambda r: normalize_name(str(r[0]) if r and r[0] else ""))
    ws.delete_rows(2, ws.max_row)
    for r in rows:
        ws.append(r)
    return ws


async def compute_purchase_for_dishes(
        dishes_portions: list[tuple[str, int]]) -> tuple[str | None, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (error, message). –ï—Å–ª–∏ error is not None ‚Äî —ç—Ç–æ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏.
    –ò–Ω–∞—á–µ message ‚Äî –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–∫—É–ø–∫–∏ (–∫–∞–∫ –≤ /zakup).
    """
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¢–¢–ö
        wb_ttk = load_workbook(TTK_FILE)
        if TTK_SHEET_NAME not in wb_ttk.sheetnames:
            return "‚ùå –í TTK.xlsx –Ω–µ—Ç –ª–∏—Å—Ç–∞ —Å –±–ª—é–¥–∞–º–∏.", ""
        ws_ttk = wb_ttk[TTK_SHEET_NAME]

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã
        if not Path(EXCEL_FILE).exists():
            return "‚ùå –§–∞–π–ª —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω.", ""
        df = pd.read_excel(EXCEL_FILE)

        result: dict[str, dict] = {}
        missing_products: list[str] = []

        for dish_name, portions in dishes_portions:
            found = False
            for row in ws_ttk.iter_rows(min_row=2, values_only=True):
                if row[0] and dish_name == str(row[0]).strip().lower():
                    ingredient = str(row[1]).strip()
                    weight = float(row[2])
                    total_weight = weight * portions

                    match = df[
                        df["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"].str.lower().str.strip().str.contains(
                            ingredient.lower().strip(), na=False)]

                    if not match.empty and not pd.isna(
                            match.iloc[0]["–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥"]):
                        price_per_kg = float(match.iloc[0]["–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥"])
                        if ingredient in result:
                            result[ingredient]["weight"] += total_weight
                        else:
                            result[ingredient] = {
                                "weight": total_weight,
                                "price_per_kg": price_per_kg
                            }
                    else:
                        missing_products.append(ingredient)
                    found = True

            if not found:
                return f"‚ùå –ë–ª—é–¥–æ ¬´{dish_name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¢–¢–ö.", ""

        if missing_products:
            return f"‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–∞—Ç—Ä–∏—Ü–µ:\n{', '.join(sorted(set(missing_products)))}", ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        lines = []
        total_value = 0.0

        for ingredient, data in result.items():
            weight_grams = round(data["weight"])
            price_per_kg = float(data["price_per_kg"])
            cost = weight_grams / 1000 * price_per_kg
            total_value += cost
            lines.append(f"{ingredient} {weight_grams} –≥—Ä")

        lines.append(f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫—É–ø–∫–∏: {round(total_value)} —Ä—É–±")
        return None, "\n".join(lines)

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ: {e}", ""


# =====================
# –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è /tt–∫
# =====================

SUBS = {
    "—Ç–∞–π—Å–∫–∏–π —á–∏–ª–∏": "–°–æ—É—Å —Å–ª–∞–¥–∫–∏–π —á–∏–ª–∏",
    "–∫—Ä–µ–≤–µ—Ç–∫–∞": "–ö—Ä–µ–≤–µ—Ç–∫–∏ —Ç–∏–≥—Ä–æ–≤—ã–µ",
    "—Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ": "–ú–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ",
}


def parse_ttk_multiline(text: str):
    """–ü–∞—Ä—Å–∏—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥: –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ = "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤–µ—Å". –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [(name, grams), ...]"""
    rows: list[tuple[str, float]] = []
    for raw in text.strip().splitlines():
        line = raw.strip()
        if not line:
            continue
        m = re.match(r"(.+?)\s+(-?\d+[.,]?\d*)\s*$", line)
        if not m:
            continue
        name, qty = m.group(1).strip(), m.group(2).replace(",", ".")
        try:
            grams = float(qty)
        except ValueError:
            continue
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
        low = name.lower()
        for k, v in SUBS.items():
            if k in low:
                name = v
                break
        name = re.sub(r"\s+", " ", name).strip()
        if name:
            # –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –µ—Å—Ç—å
            name = name[0].upper() + name[1:]
            rows.append((name, grams))
    return rows


# =====================
# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
# =====================


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["‚ûï –ù–æ–≤–∞—è –¢–¢–ö", "üì¶ –ó–∞–∫—É–ø"],
        ["üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å", "üßæ –¢–∞–±–ª–∏—Ü–∞"],
        ["üóë –£–¥–∞–ª–∏—Ç—å", "üìÇ –í—Å–µ –¢–¢–ö"],
        ["üìë –ú–∞—Å—Å–æ–≤–∞—è –¢–¢–ö"],
        ["üßÆ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω"],
        ["üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"],
        ["üìä –ö–æ–Ω—Ç—Ä–æ–ª—å –º–∞—Ä–∂–∏", "üîç –û—Ç–ª–∞–¥–∫–∞ –º–∞—Ä–∂–∏"],
        ["üçΩ –°–ø–∏—Å–æ–∫ –±–ª—é–¥"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üë®‚Äçüç≥ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                    reply_markup=reply_markup)


# -------- /dishes --------


async def dishes_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –±–ª—é–¥‚Ä¶")
        dishes = load_dishes_from_ttk()
        if not dishes:
            await update.message.reply_text(
                "‚ùå –í TTK.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞ (–ª–∏—Å—Ç TTK).")
            return ConversationHandler.END
        context.user_data["dishes_list"] = dishes
        context.user_data["cart"] = []
        context.user_data["dishes_page"] = 0
        await send_dishes_page(update, context, page=0)
        return AWAITING_DISHES_QTY
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤ /dishes: {e}")
        return ConversationHandler.END


async def send_dishes_page(update_or_cb, context, page: int):
    dishes = context.user_data.get("dishes_list", [])
    if not dishes:
        dishes = load_dishes_from_ttk()
        context.user_data["dishes_list"] = dishes
        if not dishes:
            if isinstance(update_or_cb, Update) and update_or_cb.message:
                await update_or_cb.message.reply_text("‚ùå –í TTK.xlsx –Ω–µ—Ç –±–ª—é–¥.")
            else:
                await update_or_cb.callback_query.edit_message_text(
                    "‚ùå –í TTK.xlsx –Ω–µ—Ç –±–ª—é–¥.")
            return

    total_pages = max(1, (len(dishes) + PAGE_SIZE - 1) // PAGE_SIZE)
    page = max(0, min(page, total_pages - 1))

    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    page_items = dishes[start:end]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    context.user_data["dishes_page"] = page

    # –ö–æ—Ä–∑–∏–Ω–∞
    cart = context.user_data.get("cart", [])
    cart_text = []
    if cart:
        cart_text.append(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {len(cart)} –±–ª—é–¥")
        for i, dish in enumerate(cart[:5]):
            cart_text.append(f"{i+1}. {dish}")
        if len(cart) > 5:
            cart_text.append("‚Ä¶–∏ –µ—â—ë")
    else:
        cart_text.append("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")

    # –ö–Ω–æ–ø–∫–∏ –±–ª—é–¥
    rows = []
    for i, name in enumerate(page_items):
        global_idx = start + i  # –∏–Ω–¥–µ–∫—Å –±–ª—é–¥–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
        button_text = f"‚úì {name}" if name in cart else name
        rows.append([
            InlineKeyboardButton(button_text,
                                 callback_data=f"dishes:pick:{global_idx}")
        ])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav = []
    if page > 0:
        nav.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                 callback_data=f"dishes:page:{page-1}"))
    if end < len(dishes):
        nav.append(
            InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                                 callback_data=f"dishes:page:{page+1}"))
    if nav:
        rows.append(nav)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_buttons = [
        InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º",
                             callback_data="dishes:proceed"),
        InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="dishes:clear")
    ]
    rows.append(action_buttons)

    kb = InlineKeyboardMarkup(rows)
    text = f"üçΩ –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}):\n\n" + "\n".join(
        cart_text)
    if isinstance(update_or_cb, Update) and update_or_cb.message:
        await update_or_cb.message.reply_text(text, reply_markup=kb)
    else:
        query = update_or_cb.callback_query
        await query.edit_message_text(text, reply_markup=kb)


async def dishes_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    # –§–æ–ª–ª–±–µ–∫: –ø–µ—Ä–µ—á–∏—Ç–∞–µ–º –±–ª—é–¥–∞, –µ—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
    if "dishes_list" not in context.user_data or not context.user_data.get(
            "dishes_list"):
        context.user_data["dishes_list"] = load_dishes_from_ttk()
        if not context.user_data["dishes_list"]:
            await query.edit_message_text("‚ùå –í TTK.xlsx –Ω–µ—Ç –±–ª—é–¥.")
            return

    try:
        parts = data.split(":", 2)
        if len(parts) == 2:
            _, kind = parts
            payload = None
        elif len(parts) == 3:
            _, kind, payload = parts
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –≤ callback_data")
    except ValueError:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
        return

    if kind == "page":
        page = int(payload)
        await send_dishes_page(update, context, page)
        return

    if kind == "pick":
        try:
            idx = int(payload)
        except ValueError:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –±–ª—é–¥–∞.")
            return
        dishes = context.user_data["dishes_list"]
        if idx < 0 or idx >= len(dishes):
            await query.edit_message_text(
                "‚ö†Ô∏è –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ: /dishes")
            return
        dish = dishes[idx]

        cart = context.user_data.get("cart", [])
        if dish in cart:
            cart.remove(dish)
        else:
            cart.append(dish)
        context.user_data["cart"] = cart

        # –û–±–Ω–æ–≤–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = idx // PAGE_SIZE
        await send_dishes_page(update, context, page)
        return

    if kind == "clear":
        context.user_data["cart"] = []
        current_page = context.user_data.get("dishes_page", 0)
        await send_dishes_page(update, context, page=current_page)
        return

    if kind == "proceed":
        cart = context.user_data.get("cart", [])
        if not cart:
            await query.edit_message_text(
                "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±–ª—é–¥–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            return AWAITING_DISHES_QTY

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤
        msg = "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–ø–∏—Å–∫–∞):\n\n"
        for i, dish in enumerate(cart):
            msg += f"{i+1}. {dish}\n"
        msg += "\n‚úçÔ∏è –§–æ—Ä–º–∞—Ç: —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        msg += "10 8 6\n–∏–ª–∏\n10,8,6\n–∏–ª–∏\n10\n8\n6"
        await query.edit_message_text(msg)
        return AWAITING_DISHES_QTY


async def handle_dishes_qty_input(update: Update,
                                  context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    cart = context.user_data.get("cart", [])
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏; –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã ‚Äî –º—è–≥–∫–∏–π —Ä–µ–ø—Ä–æ–º–ø—Ç
    text_only_digits = re.fullmatch(r"\s*\d+(?:[,\s]+\d+)*\s*", text)
    if not text_only_digits:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä–∞–º–∏ (–ø—Ä–∏–º–µ—Ä: 2 1 3).")
        return AWAITING_DISHES_QTY

    if not cart:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /dishes")
        return ConversationHandler.END

    # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Ç–æ–∫–µ–Ω—ã (—á–∏—Å–ª–∞) —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    tokens = re.split(r'[,\s]+', text)
    numbers = []

    for token in tokens:
        if not token:
            continue
        try:
            num = int(token)
            if num <= 0:
                raise ValueError()
            numbers.append(num)
        except ValueError:
            await update.message.reply_text(
                f"‚ùå '{token}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return AWAITING_DISHES_QTY

    if len(numbers) != len(cart):
        msg = f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å {len(cart)} —á–∏—Å–µ–ª –¥–ª—è {len(cart)} –±–ª—é–¥:\n"
        for i, dish in enumerate(cart):
            msg += f"{i+1}. {dish}\n"
        msg += f"–ê –ø–æ–ª—É—á–µ–Ω–æ {len(numbers)}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ."
        await update.message.reply_text(msg)
        return AWAITING_DISHES_QTY

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (–±–ª—é–¥–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    dishes_portions = [(dish.lower(), qty) for dish, qty in zip(cart, numbers)]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫—É–ø–∫—É
    error, message = await compute_purchase_for_dishes(dishes_portions)
    if error:
        await update.message.reply_text(error)
        return AWAITING_DISHES_QTY

    await update.message.reply_text(message)
    return ConversationHandler.END


async def handle_text_buttons(update: Update,
                              context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text == "‚ûï –ù–æ–≤–∞—è –¢–¢–ö":
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /ttk")
    elif text == "üì¶ –ó–∞–∫—É–ø":
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /zakup")
    elif text == "üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å":
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cost")
    elif text == "üßæ –¢–∞–±–ª–∏—Ü–∞":
        return await send_table(update, context)
    elif text == "üóë –£–¥–∞–ª–∏—Ç—å":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /delete <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏>")
    elif text == "üìÇ –í—Å–µ –¢–¢–ö":
        return await send_ttk_file(update, context)
    elif text == "üìë –ú–∞—Å—Å–æ–≤–∞—è –¢–¢–ö":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /ttk")
    elif text == "üßÆ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω":
        return await start_set_price_bulk(update, context)
    elif text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É":
        return await clear_table(update, context)
    elif text == "üìä –ö–æ–Ω—Ç—Ä–æ–ª—å –º–∞—Ä–∂–∏":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /margin_check")
    elif text == "üîç –û—Ç–ª–∞–¥–∫–∞ –º–∞—Ä–∂–∏":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /margin_debug")
    elif text == "üçΩ –°–ø–∏—Å–æ–∫ –±–ª—é–¥":
        # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ö–æ–¥–∏—Ç—å ConversationHandler
        await update.message.reply_text(
            "–û—Ç–∫—Ä—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –±–ª—é–¥‚Ä¶ –ù–∞–∂–º–∏—Ç–µ /dishes, –µ—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è.")
        return
    else:
        return await handle_text(update, context)


# ---------- /ttk ----------
async def start_ttk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")
    return AWAITING_TTK_NAME


async def handle_ttk_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["ttk_dish_name"] = (update.message.text or "").strip()
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤–µ—Å):\n\n–ü—Ä–∏–º–µ—Ä:\n–ö—Ä–µ–≤–µ—Ç–∫–∏ —Ç–∏–≥—Ä–æ–≤—ã–µ 50\n–ö–∞–±–∞—á–æ–∫ 40\n–°–æ—É—Å —Å–ª–∞–¥–∫–∏–π —á–∏–ª–∏ 20",
        reply_markup=ReplyKeyboardRemove(),
    )
    return AWAITING_TTK_INGREDIENTS


async def handle_ttk_ingredients(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE):
    dish_name = context.user_data.get("ttk_dish_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    text = (update.message.text or "").strip()
    rows = parse_ttk_multiline(text)

    if not rows:
        await update.message.reply_text(
            "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —Ç–µ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–æ–º."
        )
        return AWAITING_TTK_INGREDIENTS

    try:
        ws, wb = get_or_create_ttk_ws(TTK_FILE, TTK_SHEET_NAME)
        for name, grams in rows:
            ws.append([dish_name, name, grams])
        wb.save(TTK_FILE)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ TTK.xlsx: {e}"
                                        )
        return ConversationHandler.END

    await update.message.reply_text(
        f"‚úÖ –¢–¢–ö –¥–ª—è –±–ª—é–¥–∞ '{dish_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–æ–∑–∏—Ü–∏–∏: {len(rows)}.")
    return ConversationHandler.END


# ---------- /ttk_file ----------
async def send_ttk_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    p = Path(TTK_FILE)
    if not p.exists():
        await update.message.reply_text("‚ùå –§–∞–π–ª TTK.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        wb = load_workbook(p)

        # –µ—Å–ª–∏ –Ω–µ—Ç –ª–∏—Å—Ç–∞ TTK ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å Sheet1
        if TTK_SHEET_NAME not in wb.sheetnames:
            # 1) –µ—Å–ª–∏ –µ—Å—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π Sheet1 ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –∏ –¥–æ–±–∞–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if "Sheet1" in wb.sheetnames and len(wb.sheetnames) == 1:
                ws = wb["Sheet1"]
                ws.title = TTK_SHEET_NAME
                if ws.max_row == 1 and ws.max_column == 1 and (ws["A1"].value
                                                               is None):
                    ws.append(TTK_HEADERS)
                wb.save(p)
            else:
                # 2) –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–π TTK —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                ws = wb.create_sheet(title=TTK_SHEET_NAME)
                ws.append(TTK_HEADERS)
                wb.save(p)

        ws = wb[TTK_SHEET_NAME]
        dish_count = len(
            {row[0].value
             for row in ws.iter_rows(min_row=2) if row[0].value})

        with open(p, "rb") as f:
            await update.message.reply_document(f, filename="TTK.xlsx")
        await update.message.reply_text(
            f"‚úÖ –§–∞–π–ª TTK.xlsx –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\nüìù –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª—é–¥: {dish_count}.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")


# ---------- /zakup ----------
async def start_zakup(update: Update,
                      context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–µ –±–ª—é–¥–æ):\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n–°—Ç–µ–π–∫ –º–∞—á–µ—Ç–µ 12\n–°–∞–ª–∞—Ç —Å —Ö—Ä—É—Å—Ç—è—â–∏–º–∏ –±–∞–∫–ª–∞–∂–∞–Ω–∞–º–∏ 22",
        reply_markup=ReplyKeyboardRemove(),
    )
    return AWAITING_ZAKUP_INPUT


async def handle_zakup_input(update: Update,
                             context: ContextTypes.DEFAULT_TYPE):
    try:
        lines = (update.message.text or "").strip().split("\n")
        dishes: list[tuple[str, int]] = []
        missing_products: list[str] = []

        for line in lines:
            parts = line.rsplit(" ", 1)
            if len(parts) != 2:
                continue
            dish_name = parts[0].strip().lower()
            try:
                portions = int(parts[1])
            except ValueError:
                continue
            dishes.append((dish_name, portions))

        if not dishes:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏.")
            return ConversationHandler.END

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¢–¢–ö
        wb_ttk = load_workbook(TTK_FILE)
        if TTK_SHEET_NAME not in wb_ttk.sheetnames:
            await update.message.reply_text(
                f"‚ùå –í TTK.xlsx –Ω–µ—Ç –ª–∏—Å—Ç–∞ '{TTK_SHEET_NAME}'.")
            return ConversationHandler.END
        ws_ttk = wb_ttk[TTK_SHEET_NAME]

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã
        df = pd.read_excel(EXCEL_FILE)

        result: dict[str, dict] = {}

        for dish_name, portions in dishes:
            found = False
            for row in ws_ttk.iter_rows(min_row=2, values_only=True):
                if row[0] and dish_name == str(row[0]).strip().lower():
                    ingredient = str(row[1]).strip()
                    weight = float(row[2])
                    total_weight = weight * portions

                    match = df[
                        df["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"].str.lower().str.strip().str.contains(
                            ingredient.lower().strip(), na=False)]

                    if not match.empty and not pd.isna(
                            match.iloc[0]["–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥"]):
                        price_per_kg = float(match.iloc[0]["–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥"])
                        if ingredient in result:
                            result[ingredient]["weight"] += total_weight
                        else:
                            result[ingredient] = {
                                "weight": total_weight,
                                "price_per_kg": price_per_kg
                            }
                    else:
                        missing_products.append(ingredient)
                    found = True

            if not found:
                await update.message.reply_text(
                    f"‚ùå –ë–ª—é–¥–æ ¬´{dish_name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¢–¢–ö.")
                return ConversationHandler.END

        if missing_products:
            await update.message.reply_text(
                f"‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–∞—Ç—Ä–∏—Ü–µ:\n{', '.join(sorted(set(missing_products)))}"
            )
            return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        lines = []
        total_value = 0.0

        for ingredient, data in result.items():
            weight_grams = round(data["weight"])
            price_per_kg = float(data["price_per_kg"])
            cost = weight_grams / 1000 * price_per_kg
            total_value += cost
            lines.append(f"{ingredient} {weight_grams} –≥—Ä")

        lines.append(f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫—É–ø–∫–∏: {round(total_value)} —Ä—É–±")
        await update.message.reply_text("\n".join(lines))

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    return ConversationHandler.END


# ---------- /cost ----------
async def start_cost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (–∏–ª–∏ –¥–æ 3 —á–µ—Ä–µ–∑ Enter):",
        reply_markup=ReplyKeyboardRemove(),
    )
    return AWAITING_COST_NAMES


async def handle_cost_names(update: Update,
                            context: ContextTypes.DEFAULT_TYPE):
    dish_names = [
        name.strip().lower()
        for name in re.split(r"[\r\n]+", (update.message.text or "").strip())
        if name.strip()
    ]

    if not (1 <= len(dish_names) <= 3):
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ 3 –Ω–∞–∑–≤–∞–Ω–∏–π –±–ª—é–¥.")
        return AWAITING_COST_NAMES

    if not Path(EXCEL_FILE).exists() or not Path(TTK_FILE).exists():
        await update.message.reply_text(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –¢–¢–ö.")
        return ConversationHandler.END

    # –ú–∞—Ç—Ä–∏—Ü–∞ —Ü–µ–Ω (–∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç)
    wb_price = load_workbook(EXCEL_FILE)
    ws_price = wb_price.active

    headers = [cell.value for cell in ws_price[1]]
    name_col = headers.index("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç") if "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç" in headers else 0
    price_col = headers.index(
        "–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥") if "–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥" in headers else 2

    prices = {
        str(row[name_col].value).strip().lower(): row[price_col].value
        for row in ws_price.iter_rows(min_row=2)
        if row[name_col].value and row[price_col].value
    }

    # –¢–¢–ö —Å—Ç—Ä–æ–≥–æ –∏–∑ –ª–∏—Å—Ç–∞ TTK
    wb_ttk = load_workbook(TTK_FILE)
    if TTK_SHEET_NAME not in wb_ttk.sheetnames:
        await update.message.reply_text(
            f"‚ùå –í TTK.xlsx –Ω–µ—Ç –ª–∏—Å—Ç–∞ '{TTK_SHEET_NAME}'.")
        return ConversationHandler.END
    ws_ttk = wb_ttk[TTK_SHEET_NAME]

    results = []
    lines = ["üìä –†–∞—Å—á—ë—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n"]
    missing_global = set()

    for dish in dish_names:
        name = dish.strip().lower()
        rows = [
            r for r in ws_ttk.iter_rows(min_row=2)
            if str(r[0].value).strip().lower() == name
        ]

        if not rows:
            lines.append(f"‚ùå –ë–ª—é–¥–æ ¬´{dish}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¢–¢–ö.")
            continue

        total = 0
        missing = []
        lines.append(f"üçΩ *{dish.title()}*")

        for row in rows:
            ingr = str(row[1].value).strip().lower()
            weight = float(row[2].value)

            matched_price = None
            for k in prices:
                if ingr in k or k in ingr:
                    matched_price = prices[k]
                    break

            if matched_price is None:
                lines.append(f"‚Äî {ingr.title()} ‚Äî ‚ùå –Ω–µ—Ç —Ü–µ–Ω—ã")
                missing.append(ingr)
                missing_global.add(ingr)
                continue

            cost = round(weight * float(matched_price) / 1000)
            total += cost
            lines.append(
                f"‚Äî {ingr.title()}: {weight} –≥ √ó {round(float(matched_price))}‚ÇΩ = {cost}‚ÇΩ"
            )

        if missing:
            lines.append("‚õî –†–∞—Å—á—ë—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ —Ü–µ–Ω—ã.\n")
            continue

        lines.append(f"üí∞ *–°—É–º–º–∞:* {total}‚ÇΩ")
        results.append({"name": dish, "cost": total})

    if missing_global:
        lines.append("\n‚ùóÔ∏è–î–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Ç—Ä–∏—Ü—É —Ü–µ–Ω—ã –¥–ª—è:")
        for ingr in sorted(missing_global):
            lines.append(f"‚Äî {ingr.title()}")
        await update.message.reply_text("\n".join(lines))
        return ConversationHandler.END

    context.user_data["cost_results"] = results
    await update.message.reply_text(
        "\n".join(lines) +
        "\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞ (—Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    return AWAITING_COST_PRICES


async def handle_cost_price(update: Update,
                            context: ContextTypes.DEFAULT_TYPE):
    prices_text = (update.message.text or "").strip().split("\n")
    results = context.user_data.get("cost_results", [])

    if len(prices_text) != len(results):
        await update.message.reply_text(
            "‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–ª—é–¥.")
        return AWAITING_COST_PRICES

    response = ["üìà *–°–≤–æ–¥–∫–∞:*"]
    total_cost = 0
    total_foodcost = 0

    for i, price_str in enumerate(prices_text):
        try:
            sale_price = float(price_str.strip().replace(",", "."))
        except ValueError:
            await update.message.reply_text(
                "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
            return AWAITING_COST_PRICES

        dish = results[i]["name"]
        cost = results[i]["cost"]
        foodcost = round(cost / sale_price * 100, 1) if sale_price else 0

        total_cost += cost
        total_foodcost += foodcost

        response.append(
            f"‚Ä¢ {dish.title()} ‚Äî —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å {cost}‚ÇΩ, –ø—Ä–æ–¥–∞–∂–∞ {sale_price}‚ÇΩ, foodcost {foodcost}%"
        )

    avg_foodcost = round(total_foodcost / len(results), 1) if results else 0

    response.append(f"\nüíµ *–û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:* {total_cost}‚ÇΩ")
    response.append(f"üìä *–°—Ä–µ–¥–Ω–∏–π foodcost:* {avg_foodcost}%")

    await update.message.reply_text("\n".join(response), parse_mode="Markdown")
    return ConversationHandler.END


# ---------- /delete ----------
async def delete_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = " ".join(context.args).strip().lower()
    deleted = False

    for file, col in [(EXCEL_FILE, 0), (TTK_FILE, 0)]:
        if not Path(file).exists():
            continue
        wb = load_workbook(file)
        # –í TTK —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–∏—Å—Ç–µ TTK
        if file == TTK_FILE:
            if TTK_SHEET_NAME not in wb.sheetnames:
                continue
            ws = wb[TTK_SHEET_NAME]
        else:
            ws = wb.active

        rows_to_delete = [
            row[0].row for row in ws.iter_rows(min_row=2)
            if str(row[col].value).strip().lower() == name
        ]
        for row_idx in sorted(rows_to_delete, reverse=True):
            ws.delete_rows(row_idx)
            deleted = True
        wb.save(file)

    if deleted:
        await update.message.reply_text(f"‚úÖ '{name}' —É–¥–∞–ª—ë–Ω.")
    else:
        await update.message.reply_text(f"‚ùå '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# ---------- /table ----------
async def send_table(update: Update, context: ContextTypes.DEFAULT_TYPE):
    p = Path(EXCEL_FILE)
    if not p.exists():
        await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    with open(p, "rb") as f:
        await update.message.reply_document(f, filename="–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å.xlsx")


# ---------- /set_price_bulk ----------


def clean_price_bulk_input(text: str) -> list[str]:
    text = text.replace("\xa0", " ")
    lines = text.split("\n")
    cleaned: list[str] = []
    for line in lines:
        line = line.strip()
        if not line:
            continue
        line = re.sub(r"[^\w\s.,-]", "", line)
        line = line.replace(",", ".")
        line = re.sub(r"\s+", " ", line)
        cleaned.append(line)
    return cleaned


async def start_set_price_bulk(update: Update,
                               context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Ü–µ–Ω –∏ –≤–µ—Å–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n–ë—Ä–æ–∫–∫–æ–ª–∏ 4000 250\n–ö—É–Ω–∂—É—Ç 1000 320\n–°–æ—É—Å –ø–µ—Å—Ç–æ 500 280",
        reply_markup=ReplyKeyboardRemove(),
    )
    return AWAITING_SET_PRICE_BULK


async def handle_set_price_bulk(update: Update,
                                context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    cleaned_lines = clean_price_bulk_input(text)
    ws, wb = ensure_matrix_file(EXCEL_FILE)
    added = updated = 0
    bad: list[str] = []
    updated_items: list[tuple[str, float]] = []

    for line in cleaned_lines:
        parts = line.rsplit(" ", 2)
        if len(parts) != 3:
            bad.append(line)
            continue
        name, w_str, s_str = parts
        w_num = re.sub(r"\s", "", w_str)
        s_num = re.sub(r"\s", "", s_str)
        try:
            weight_g = float(w_num)
            amount = float(s_num)
            if weight_g <= 0 or amount <= 0:
                raise ValueError()
            price_per_kg = amount / weight_g * 1000.0
        except Exception:
            bad.append(line)
            continue
        before = ws.max_row
        upsert_row(ws, name, weight_g, round(price_per_kg, 2))
        after = ws.max_row
        if after > before:
            added += 1
        else:
            updated += 1
        updated_items.append((name, round(price_per_kg, 2)))

    sort_sheet_by_name(ws)
    wb.save(EXCEL_FILE)

    msg = [f"‚úÖ –ì–æ—Ç–æ–≤–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}."]
    if updated_items:
        msg.append("\n–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
        for name, price_per_kg in updated_items[:30]:
            msg.append(f"‚Äî {name}: {price_per_kg} ‚ÇΩ/–∫–≥")
    if bad:
        msg.append("\n‚ö†Ô∏è –ù–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏—Å—å —Å—Ç—Ä–æ–∫–∏:")
        msg.extend([f"‚Äî {b}" for b in bad[:20]])
        if len(bad) > 20:
            msg.append(f"‚Ä¶–∏ –µ—â—ë {len(bad) - 20}")

    await update.message.reply_text("\n".join(msg))
    return ConversationHandler.END


# ---------- /clear_table ----------
async def clear_table(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ws, wb = ensure_matrix_file(EXCEL_FILE)
    if ws.max_row > 1:
        ws.delete_rows(2, ws.max_row - 1)
    wb.save(EXCEL_FILE)
    await update.message.reply_text(
        "üßπ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞. –û—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏.")


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞ (–Ω–µ —Å–ø–∏—Å–æ–∫) ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text or ""

    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
    if "\n" in raw.strip():
        await update.message.reply_text(
            "–ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫. –î–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_price_bulk."
        )
        return

    text = raw.strip().lower()
    text = (text.replace("–≥—Ä–∞–º–º", "").replace("–≥—Ä–∞–º–º–∞",
                                              "").replace("–≥—Ä", "").replace(
                                                  "—Ä—É–±", "").replace("‚ÇΩ", ""))
    text = re.sub(r"\s+", " ", text).strip()

    m = re.match(r"^(.+?)\s+([\d.,]+)\s+([\d.,]+)$", text)
    if not m:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ç—Ä–æ–∫—É. –§–æ—Ä–º–∞—Ç: ¬´–ù–∞–∑–≤–∞–Ω–∏–µ 1000 250¬ª.\n–î–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_price_bulk."
        )
        return

    name, w_str, p_str = m.groups()
    try:
        weight = float(w_str.replace(",", "."))
        amount = float(p_str.replace(",", "."))
        if weight <= 0 or amount <= 0:
            raise ValueError()
        price_per_kg = round(amount / weight * 1000.0, 2)
    except Exception:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–µ—Å/—Ü–µ–Ω—É. –ü—Ä–∏–º–µ—Ä: ¬´–ë—Ä–æ–∫–∫–æ–ª–∏ 1000 250¬ª")
        return

    try:
        ws, wb = ensure_matrix_file(EXCEL_FILE)
        upsert_row(ws, name, weight, price_per_kg)
        sort_sheet_by_name(ws)
        wb.save(EXCEL_FILE)
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {name.strip()} ‚Äî {int(weight)} –≥, {amount:g} ‚ÇΩ, {price_per_kg} ‚ÇΩ/–∫–≥"
        )
    except Exception:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏.")


# =====================
# –ó–∞–ø—É—Å–∫
# =====================


def main():
    from dotenv import load_dotenv
    load_dotenv()

    application = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).post_init(set_bot_commands).build()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –º–∞—Ä–∂–∏
    setup_margin_control(application)

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ttk_file", send_ttk_file))
    application.add_handler(CommandHandler("table", send_table))
    application.add_handler(CommandHandler("delete", delete_entry))
    application.add_handler(CommandHandler("clear_table", clear_table))

    # /ttk
    conv_ttk = ConversationHandler(
        entry_points=[CommandHandler("ttk", start_ttk),
        MessageHandler(filters.Regex(r"^‚ûï –ù–æ–≤–∞—è –¢–¢–ö$"), start_ttk)],
        states={
            AWAITING_TTK_NAME:
            [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ttk_name)],
            AWAITING_TTK_INGREDIENTS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               handle_ttk_ingredients)
            ],
        },
        fallbacks=[],
    )
    application.add_handler(conv_ttk)

    # /cost
    conv_cost = ConversationHandler(
        entry_points=[CommandHandler("cost", start_cost),
        MessageHandler(filters.Regex(r"^üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å$"), start_cost)],
        states={
            AWAITING_COST_NAMES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               handle_cost_names)
            ],
            AWAITING_COST_PRICES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               handle_cost_price)
            ],
        },
        fallbacks=[],
    )
    application.add_handler(conv_cost)

    # /zakup
    conv_zakup = ConversationHandler(
        entry_points=[CommandHandler("zakup", start_zakup),
        MessageHandler(filters.Regex(r"^üì¶ –ó–∞–∫—É–ø$"), start_zakup)],
        states={
            AWAITING_ZAKUP_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               handle_zakup_input)
            ],
        },
        fallbacks=[],
    )
    application.add_handler(conv_zakup)

    # /set_price_bulk
    conv_set_price_bulk = ConversationHandler(
        entry_points=[CommandHandler("set_price_bulk", start_set_price_bulk)],
        states={
            AWAITING_SET_PRICE_BULK: [
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               handle_set_price_bulk)
            ],
        },
        fallbacks=[],
    )
    application.add_handler(conv_set_price_bulk)

    # /dishes (—Ä–∞–∑–≥–æ–≤–æ—Ä –∏ inline-–∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    conv_dishes = ConversationHandler(
        entry_points=[
            CommandHandler("dishes", dishes_command),
            MessageHandler(filters.Regex(r"^üçΩ –°–ø–∏—Å–æ–∫ –±–ª—é–¥$"), dishes_command),
        ],
        states={
            AWAITING_DISHES_QTY: [
                CallbackQueryHandler(dishes_callback, pattern=r"^dishes:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               handle_dishes_qty_input),
            ],
        },
        fallbacks=[],
    )
    application.add_handler(conv_dishes)

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–æ—á–∏–π —Ç–µ–∫—Å—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_buttons))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()
